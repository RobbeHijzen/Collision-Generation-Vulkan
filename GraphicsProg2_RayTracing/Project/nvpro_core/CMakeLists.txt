cmake_minimum_required(VERSION 3.5)
#####################################################################################
# offer the choice of having nvpro_core as a sub-folder... good for packaging a sample
#
# if BASE_DIRECTORY not defined, it means this cmake file was called as the first entry point and not included
if(NOT BASE_DIRECTORY) # if not defined, it means this cmake file was called as the first entry point and not included
  message(FATAL_ERROR "cannot be directly invoked")
else()
  Message(STATUS "-------------------------------")
  Message(STATUS "Processing nvpro_core files")
endif()


set(NVPWINDOW_SOURCE
  "nvp/nvpwindow.cpp"
  "nvp/nvpwindow.hpp"
  "nvp/nvpsystem.cpp"
  "nvp/nvpsystem.hpp"
  "nvp/nvpfilesystem.cpp"
  "nvp/nvpfilesystem.hpp"
  # Do not add project_name.cpp here as it contains per-project dependent data.
  # perproject_globals.cpp will be automatically added to the per-project builds via
  # COMMON_SOURCE_FILES
  "nvp/perproject_globals.hpp"
)

LIST(APPEND NVPWINDOW_SOURCE "nvp/nvpsystem_win32.cpp" )

if(NOT (CMAKE_SIZEOF_VOID_P EQUAL 8))
  message( FATAL_ERROR "64-bit builds are mandatory for this framework" )
endif()


# Add third party libraries. This sets THIRDPARTY_LIBRARIES to list of added libraries
add_subdirectory(third_party)


file(GLOB FILEFORMATS_SOURCE fileformats/*.cpp fileformats/*.hpp fileformats/*.inl fileformats/*.h)
file(GLOB NVMATH_SOURCE nvmath/*.cpp nvmath/*.hpp nvmath/*.inl nvmath/*.h)
file(GLOB NVHELPERS_SOURCE nvh/*.cpp nvh/*.hpp nvh/*.inl nvh/*.h)

if (NOT TARGET tinygltf)
  list(REMOVE_ITEM NVHELPERS_SOURCE ${CMAKE_CURRENT_SOURCE_DIR}/nvh/gltfscene.cpp)
  list(REMOVE_ITEM NVHELPERS_SOURCE ${CMAKE_CURRENT_SOURCE_DIR}/nvh/gltfscene.hpp)
endif()

set(library_name "nvpro_core")

  file(GLOB NVHELPERSVK_SOURCE nvvk/*.cpp nvvk/*.hpp nvvk/*.inl nvvk/*.h)

  # the implementation depends on SUPPORTS_AFTERMATH and thus can only be provided
  # as part of the individual sample projects. Check setup.cmake where we insert
  # nsight_aftermath_vk.cpp into the projects automatically
  list(REMOVE_ITEM NVHELPERSVK_SOURCE ${CMAKE_CURRENT_SOURCE_DIR}/nvvk/nsight_aftermath_vk.cpp)

  # Adding compile_glsl 
  if(EXISTS ${BASE_DIRECTORY}/nvpro_core/cmake/utilities.cmake)
    include(${BASE_DIRECTORY}/nvpro_core/cmake/utilities.cmake)
  endif()

  # Vulkan-high-level helpers
  file(GLOB NVVKHL_SOURCE nvvkhl/*.cpp nvvkhl/*.hpp nvvkl/*.inl nvvkh;/*.h)
  set(SHD_DIR nvvkhl/shaders)
  file(GLOB SHD_HDR  ${SHD_DIR}/*.glsl ${SHD_DIR}/*.h)
  file(GLOB SHD_SRC ${SHD_DIR}/*.vert ${SHD_DIR}/*.frag ${SHD_DIR}/*.comp ${SHD_DIR}/*.rgen ${SHD_DIR}/*.rchit ${SHD_DIR}/*.rmiss)
  # Compiling shaders to SPIR-V header
  #compile_glsl(
  #    SOURCE_FILES ${SHD_SRC}
  #    HEADER_FILES ${SHD_HDR}
  #    DST "${CMAKE_CURRENT_SOURCE_DIR}/_autogen" 
  #    VULKAN_TARGET "vulkan1.3"
  #    HEADER ON
  #    DEPENDENCY ${VULKAN_BUILD_DEPENDENCIES}
  #    FLAGS "-I${SHD_DIR}" "-I${CMAKE_CURRENT_SOURCE_DIR}" -g
  #    )
  
  if (NOT TARGET vma)
    list(REMOVE_ITEM NVHELPERSVK_SOURCE ${CMAKE_CURRENT_SOURCE_DIR}/nvvk/memallocator_vma_vk.hpp)
    list(REMOVE_ITEM NVHELPERSVK_SOURCE ${CMAKE_CURRENT_SOURCE_DIR}/nvvk/memallocator_vma_vk.inl)
    list(REMOVE_ITEM NVVKHL_SOURCE ${CMAKE_CURRENT_SOURCE_DIR}/nvvkhl/alloc_vma.hpp)
  endif()
  
  source_group("nvvk" FILES ${NVHELPERSVK_SOURCE})
  source_group("nvvkhl" FILES ${NVVKHL_SOURCE})
  source_group("nvvkhl/shaders" FILES ${GLSL_SOURCES} ${GLSL_HEADERS})
  set(NVVKHL_SHADERS ${GLSL_SOURCES} ${GLSL_HEADERS})

  string(CONCAT library_name ${library_name} "_vk")
  
  if(WIN32)
    add_definitions(-DVK_USE_PLATFORM_WIN32_KHR)
  endif(WIN32)
  if(UNIX)
    add_definitions(-DVK_USE_PLATFORM_XCB_KHR)
    add_definitions(-DVK_USE_PLATFORM_XLIB_KHR)
  endif(UNIX)



if (USING_SHADERC)
  string(CONCAT library_name ${library_name} "_shaderc")
endif()

source_group("fileformats" FILES ${FILEFORMATS_SOURCE})
source_group("noise" FILES ${NOISE_SOURCE})
source_group("nvmath" FILES ${NVMATH_SOURCE})
source_group("nvh" FILES ${NVHELPERS_SOURCE})
source_group("nvp" FILES ${NVPWINDOW_SOURCE})
source_group("imgui" FILES ${IMGUI_SOURCE})

if(MSVC)
  add_definitions(-D_CRT_SECURE_NO_WARNINGS)
endif(MSVC)


add_library(nvpro_core STATIC 
  ${NVHELPERS_SOURCE}
  ${NVMATH_SOURCE}
  ${IMGUI_SOURCE}
  ${FILEFORMATS_SOURCE}
  ${NVPWINDOW_SOURCE}
  ${OPENGL_FILES}
  ${NVHELPERSVK_SOURCE}
  ${NVVKHL_SOURCE}
  ${NVVKHL_SHADERS}
  ${NVHELPERSGL_SOURCE}
  ${NVHELPERSDX12_SOURCE}
  ${PACKAGE_SOURCE_FILES}
  ${NVHELPERSOPTIX_FILES}
)

# Create precompiled header (added in CMake 3.16)
if(${CMAKE_VERSION} VERSION_GREATER_EQUAL "3.16.0")
  set(_PCH_FILES
    "<algorithm>"
    ${CMAKE_CURRENT_SOURCE_DIR}/nvh/nvprint.hpp
  )
  target_precompile_headers(nvpro_core PRIVATE ${_PCH_FILES})
endif()

# Add X11 for screenshot support on linux
if(UNIX)
  find_package(X11 REQUIRED)
  LIST(APPEND PLATFORM_LIBRARIES ${X11_LIBRARIES})
endif()

# Make Windows compilation somewhat faster
if(WIN32)
  target_compile_definitions(nvpro_core PRIVATE WIN32_LEAN_AND_MEAN)
endif()

if(USING_IMGUI)
  # Enable ImVec* operators for all nvpro_core. See imgui.h.
  target_compile_definitions(nvpro_core PRIVATE IMGUI_DEFINE_MATH_OPERATORS)
endif()

target_link_libraries(nvpro_core
  ${PLATFORM_LIBRARIES} 
  glfw 
  imgui
  implot
  fmt
  glm
  ${THIRDPARTY_LIBRARIES}
 )

target_include_directories(nvpro_core PUBLIC . "nvh/" "nvp/")
set_target_properties(nvpro_core PROPERTIES OUTPUT_NAME ${library_name})

message(STATUS "nvpro_core library name: ${library_name}")

